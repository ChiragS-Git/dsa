#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    newNode->prev = NULL;
    return newNode;
}

void insertLeft(struct Node** head, int afterValue, int newData) {
    struct Node* temp = *head;
    while (temp != NULL) {
        if (temp->data == afterValue) {
            struct Node* newNode = createNode(newData);
            
            newNode->next = temp;
            newNode->prev = temp->prev;

            if (temp->prev != NULL) {
                temp->prev->next = newNode;
            } else {
                *head = newNode;
            }
            temp->prev = newNode;
            return;
        }
        temp = temp->next;
    }
    printf("Node with value %d not found.\n", afterValue);
}

void deleteNode(struct Node** head, int value) {
    struct Node* temp = *head;

    if (*head == NULL) {
        printf("List is empty!\n");
        return;
    }
    
    while (temp != NULL) {
        if (temp->data == value) {
            if (temp == *head) {
                *head = temp->next;
                if (*head != NULL) {
                    (*head)->prev = NULL;
                }
            } else {
                if (temp->prev != NULL) {
                    temp->prev->next = temp->next;
                }
                if (temp->next != NULL) {
                    temp->next->prev = temp->prev;
                }
            }
            free(temp);
            return;
        }
        temp = temp->next;
    }

    printf("Node with value %d not found.\n", value);
}

void displayList(struct Node* head) {
    struct Node* temp = head;
    if (temp == NULL) {
        printf("List is empty.\n");
        return;
    }
    
    printf("Doubly Linked List: ");
    while (temp != NULL) {
        printf("%d <-> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = createNode(10); 

    head->next = createNode(20);
    head->next->prev = head;
    head->next->next = createNode(30);
    head->next->next->prev = head->next;
    
    displayList(head);

    insertLeft(&head, 20, 25);  // Insert 25 before 20
    displayList(head);


    deleteNode(&head, 20);  // Delete node with value 20
    displayList(head);

    deleteNode(&head, 50);  // Node 50 does not exist
    displayList(head);

    return 0;
}
